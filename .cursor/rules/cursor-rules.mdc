## Project Overview

**Nafsy** is a mental health React Native app built with Expo, featuring AI-powered chat, mood tracking, wellness exercises, and multilingual support (English/Arabic). The app uses Clerk for authentication, Convex for real-time backend, and follows iOS design patterns with Apple-style components.

## Development Commands
**ALWAYS USE BUN or BUNX COMMANDS**

### Development
- `bun expo start` - Start Expo development server
- `bun expo start --clear` - Start with cache cleared
- `bun expo start --tunnel` - Start with tunnel for testing on physical devices
- `bun expo prebuild` - Generate native iOS/Android projects
- `bun expo run:ios` - Run on iOS simulator
- `bun expo run:android` - Run on Android emulator

### Convex Backend
- `bunx convex dev` - Start Convex development server
- `bunx convex deploy` - Deploy backend to production
- `bunx convex dashboard` - Open Convex dashboard in browser
- `bunx convex logs` - View real-time backend logs
- `bunx convex env` - Manage environment variables

### Code Quality
- `bun expo install --fix` - Fix package version mismatches
- `bun lint` - Run ESLint with React Compiler integration
- `bun lint:fix` - Run ESLint with auto-fix
- TypeScript checking via IDE integration (no separate command available)
- `bun format` - Format code with Prettier

### Performance & Monitoring
- **React Compiler**: Automatic performance optimizations with React 19
- **Expo Atlas**: Bundle analysis and performance monitoring
- **Virtual Scrolling**: Efficient list rendering for large datasets
- **Memoization**: Strategic component memoization for performance
- **Query Optimization**: Efficient data fetching patterns with Convex

### Build & Deploy
- `bunx eas build --platform ios` - Build for iOS using EAS
- `bunx eas build --platform android` - Build for Android using EAS
- `bunx eas build --platform all` - Build for both platforms
- `bunx eas submit` - Submit to app stores
- `bunx eas update` - Push OTA updates

## Convex Tools Guidance
- **Convex MCP Server Tool**: Can be used for all Convex-related tasks and operations



## Project Structure

```
src/
├── app/                    # Expo Router pages
│   ├── (auth)/            # Authentication flow
│   │   ├── _layout.tsx    # Auth layout with redirect logic
│   │   ├── welcome.tsx    # Language selection
│   │   ├── sign-in.tsx    # Sign in screen
│   │   ├── sign-up.tsx    # Sign up screen
│   │   └── onboarding.tsx # User preferences setup
│   ├── (tabs)/            # Main app tabs
│   │   ├── _layout.tsx    # Tab navigation with user creation logic
│   │   ├── index.tsx      # Advanced chat screen with AI integration
│   │   ├── mood.tsx       # Mood tracking
│   │   ├── exercises.tsx  # Wellness exercises
│   │   └── profile.tsx    # User profile and settings
│   ├── _layout.tsx        # Root layout with providers
│   └── index.tsx          # Entry point with auth routing
├── components/
│   ├── data/              # Data management components
│   │   ├── ConvexClientProvider.tsx # Convex client setup
│   │   └── TokenCacheProvider.tsx   # Token management
│   ├── error/             # Error handling components
│   │   ├── GlobalErrorHandler.tsx   # App-wide error management
│   │   └── ErrorBoundary.tsx        # React error boundaries
│   ├── examples/          # Component examples and demos
│   ├── layout/            # Layout components
│   │   ├── HeaderBackground.tsx     # Navigation header styling
│   │   ├── TabBarBackground.tsx     # Tab bar styling
│   │   └── ContentUnavailable.tsx   # Empty state components
│   ├── performance/       # Performance optimization components
│   │   ├── MemoizedComponents.tsx   # Memoization utilities
│   │   └── VirtualizedList.tsx      # Virtualized lists
│   ├── runtime/           # Runtime utilities
│   │   ├── FadeIn.tsx             # Animation components
│   │   └── TouchableBounce.tsx    # Enhanced touch interactions
│   └── ui/                # Core UI components
│       ├── Form/          # Modular form components
│       │   ├── FormDatePicker.tsx   # Date picker input
│       │   ├── FormItem.tsx         # Generic form item
│       │   ├── FormLink.tsx         # Navigation links
│       │   ├── FormSection.tsx      # Form sections
│       │   ├── FormText.tsx         # Text inputs
│       │   └── FormToggle.tsx       # Toggle switches
│       ├── Chat/          # Chat system components
│       │   ├── FloatingChatMode.tsx    # Floating chat interface
│       │   ├── QuickReplySuggestions.tsx # Context-aware suggestions
│       │   ├── TypingIndicator.tsx     # Animated typing indicator
│       │   └── ChatMessage.tsx         # Message components
│       ├── Form.tsx       # Apple-style form components (legacy)
│       ├── img.tsx        # SF Symbols support
│       ├── Skeleton.tsx   # Loading skeleton components
│       ├── GenericList.tsx # Reusable list components
│       ├── Segments.tsx   # Segmented controls
│       └── IconSymbol.tsx # Enhanced SF Symbols
├── hooks/                 # Custom hooks
│   ├── useLocale.tsx     # Multilingual support with Context
│   ├── useChatManager.ts # Comprehensive chat functionality
│   ├── useAIActions.ts   # AI operations and responses
│   ├── useActionWithState.ts # Advanced async state management
│   ├── useOptimizedQueries.ts # Query optimization patterns
│   ├── useHeaderSearch.ts # Search functionality
│   ├── useMergedRef.ts   # Ref management utilities
│   └── useTabToTop.ts    # Navigation utilities
├── locales/              # Translation system
│   ├── en.ts            # English translations (centralized)
│   └── ar.ts            # Arabic translations (centralized)
├── svg/                  # SVG assets and icons
├── theme/                # Comprehensive theme system
│   ├── ThemeProvider.tsx # Theme management and switching
│   ├── colors.ts        # Semantic colors and design tokens
│   ├── themedStyles.ts  # Centralized theming utilities
│   └── index.ts         # Theme exports and convenience hooks
├── types/                # TypeScript type definitions
│   ├── global.d.ts      # Global type declarations
│   └── navigation.ts    # Navigation type definitions
├── utils/                # Utility functions
│   ├── cache.ts         # Clerk token cache
│   └── theme.ts         # Theme utilities
└── convex/               # Backend functions
    ├── users.ts          # User management
    ├── messages.ts       # Chat message handling
    ├── ai.ts            # OpenAI integration and actions
    ├── schema.ts        # Enhanced database schema
    └── ...              # Other backend functions
```

## Architecture

### Authentication Flow (Clerk + Convex)
1. **Root Index** (`/src/app/index.tsx`) - Handles initial auth routing
2. **Auth Layout** (`/src/app/(auth)/_layout.tsx`) - Redirects authenticated users to tabs
3. **Tabs Layout** (`/src/app/(tabs)/_layout.tsx`) - Creates Convex user if needed, handles onboarding
4. **User Creation Flow**: Clerk user → Convex user creation → Onboarding (if needed) → Main app

### Key Components
- **LocaleProvider**: Provides stable context for language switching (en/ar) with RTL support
- **Form Components**: Apple-style settings forms with sections, links, toggles
- **Navigation**: Expo Router with proper loading states and redirect handling

### Backend (Convex)
- **Real-time Database**: Document-based with automatic reactivity
- **Mutations**: Transactional operations (upsertUser, completeOnboarding)
- **Queries**: Real-time data fetching with optimistic updates
- **Actions**: External API calls with full OpenAI integration
- **AI Integration**: Advanced mental health chat with crisis detection
- **Message System**: Real-time chat with reactions and pagination

### Advanced Chat System
- **FloatingChatMode**: Animated floating chat interface with gesture support
- **AI Integration**: OpenAI-powered mental health conversations with contextual awareness
- **QuickReplySuggestions**: Context-aware reply suggestions based on conversation state
- **TypingIndicator**: Smooth animated typing indicators with proper theme integration
- **Crisis Detection**: Multi-language crisis detection with immediate response protocols
- **Message Reactions**: User feedback system for AI responses to improve conversation quality
- **Real-time Updates**: Live message streaming with optimistic UI updates

### Theme System
- **ThemeProvider**: Comprehensive theme management with light/dark mode switching
- **Semantic Colors**: Mental health-focused color palette with severity indicators
- **Design Tokens**: Centralized design system with proper TypeScript support
- **Platform Integration**: Native iOS design patterns with Apple Colors integration
- **Performance**: Optimized theme switching with smooth transitions

## Environment Variables Required
```bash
# Convex
EXPO_PUBLIC_CONVEX_URL=https://your-deployment.convex.cloud
CONVEX_DEPLOY_KEY=prod:your-deployment-key

# Clerk Authentication  
EXPO_PUBLIC_CLERK_PUBLISHABLE_KEY=pk_test_your-key
CLERK_SECRET_KEY=sk_test_your-secret-key
CLERK_JWT_ISSUER_DOMAIN=your-app.clerk.accounts.dev

# OpenAI (for AI chat features)
OPENAI_API_KEY=sk-proj-your-api-key

# Future: Superwall (for payments)
# EXPO_PUBLIC_SUPERWALL_API_KEY=your_superwall_api_key
```



### Modern Modular Form Components (Form/ directory)
```tsx
// Modular form components (preferred for new development)
import { FormSection, FormText, FormToggle, FormLink, FormDatePicker } from '@/components/ui/Form';

// Individual form components
<FormSection title="User Preferences">
  <FormText 
    label="Display Name" 
    value={displayName} 
    onChangeText={setDisplayName}
    systemImage="person"
  />
  <FormToggle 
    label="Dark Mode" 
    value={darkMode} 
    onValueChange={setDarkMode}
    systemImage="moon"
  />
  <FormDatePicker 
    label="Birth Date" 
    value={birthDate} 
    onDateChange={setBirthDate}
    systemImage="calendar"
  />
  <FormLink 
    href="/profile/privacy" 
    label="Privacy Settings"
    systemImage="hand.raised"
  />
</FormSection>
```

### Advanced Chat Components
```tsx
// Floating chat mode with AI integration
<FloatingChatMode
  isVisible={showFloatingChat}
  onToggle={setShowFloatingChat}
  conversation={currentConversation}
  onSendMessage={handleSendMessage}
/>

// Quick reply suggestions
<QuickReplySuggestions
  suggestions={contextualSuggestions}
  onSelectSuggestion={handleSelectSuggestion}
  mood={currentMood}
/>

// Typing indicator with theme integration
<TypingIndicator
  isVisible={isAITyping}
  theme={currentTheme}
  animated={true}
/>
```

## Multilingual Support
- English and Arabic support with RTL layout
- Context-based with stable provider pattern
- **Centralized translations** in `/src/locales/en.ts` and `/src/locales/ar.ts`
- Translation helper: `const { t } = useTranslation()`
- **PREFERRED Usage**: `t("auth.onboarding.title")` (centralized keys)
- **Legacy Usage**: `t("key", { en: "English text", ar: "النص العربي" })` (inline - avoid for new code)

### Translation System Architecture
- **Centralized Pattern**: Use nested keys like `auth.signIn.title`, `navigation.chat`, etc.
- **File Structure**: Well-organized sections (auth, navigation, chat, mood, exercises, profile, etc.)
- **Type Safety**: Both translation files use `as const` for TypeScript support
- **RTL Support**: Automatic RTL detection and layout switching for Arabic
- **Fallback**: Graceful fallback to English if Arabic translation missing

## Important Implementation Notes

### Convex Integration
- User creation happens automatically in tabs layout
- Use refs to prevent duplicate user creation attempts
- All mutations are transactional (all or nothing)


### Theme System Usage
- **ThemeProvider Integration**: Wrap app with ThemeProvider for consistent theming
- **useAppTheme Hook**: Primary hook for accessing theme, colors, and design tokens
- **Design Tokens**: Use structured spacing, fontSize, fontWeight, borderRadius values
- **createStyles Helper**: Type-safe style creation with proper theme integration
- **Theme Switching**: Automatic light/dark/system mode with persistence

```tsx
// Theme provider setup
<ThemeProvider>
  <App />
</ThemeProvider>

// Modern theme usage (PREFERRED)
import { useAppTheme, createStyles } from '@/theme';

const MyComponent = () => {
  const { colors, spacing, fontSize, fontWeight, borderRadius } = useAppTheme();

  const styles = createStyles(
    ({ colors, spacing, fontSize, fontWeight, borderRadius }) => ({
      container: {
        backgroundColor: colors.background.primary,
        padding: spacing.lg,
        borderRadius: borderRadius.md,
      },
      title: {
        fontSize: fontSize.xl,
        fontWeight: fontWeight.bold,
        color: colors.text.primary,
        marginBottom: spacing.md,
      },
      button: {
        backgroundColor: colors.interactive.primary,
        paddingVertical: spacing.md,
        paddingHorizontal: spacing.lg,
        borderRadius: borderRadius.md,
      },
    }),
    { colors, spacing, fontSize, fontWeight, borderRadius }
  );

  return (
    <View style={styles.container}>
      <Text style={styles.title}>Hello World</Text>
      <TouchableOpacity style={styles.button}>
        <Text>Button</Text>
      </TouchableOpacity>
    </View>
  );
};

// Alternative: Individual theme hooks (when you only need specific values)
import { useColors, useTheme } from '@/theme';

const colors = useColors(); // Just colors
const { isDark, setThemeMode } = useTheme(); // Full theme context

// Legacy pattern (avoid for new code)
import { useThemedStyles } from '@/theme/ThemeProvider';

const styles = useThemedStyles((colors, isDark) => ({
  container: {
    backgroundColor: colors.background.primary,
  },
}));

```

### Code Quality
- TypeScript checking via IDE integration (no separate command available)
- Fix TypeScript errors immediately
- Use proper memoization for context providers
- Follow React hooks rules strictly
- **Translation Best Practices**: Use centralized translation keys instead of inline objects
- **Theme Consistency**: Always use `useAppTheme()` hook and design tokens for consistent styling
- **Type Safety**: Use `AppTheme` and `StylesProps` types for component props and style functions

```tsx
// Chat management with AI integration
const { 
  messages, 
  sendMessage, 
  isTyping, 
  suggestions 
} = useChatManager(conversationId);

// AI actions with error handling
const { 
  generateResponse, 
  isGenerating, 
  error 
} = useAIActions();

// Optimized query patterns
const { 
  data, 
  isLoading, 
  refetch 
} = useOptimizedQueries(['messages', conversationId], {
  enabled: !!conversationId,
  staleTime: 5000,
});
```

### Backend Architecture (Enhanced)
- **Enhanced Schema**: Comprehensive database schema with proper indexing and relationships
- **AI Integration**: Full OpenAI integration with mental health-specific prompts and safety measures
- **Crisis Detection**: Advanced multi-language crisis detection with immediate response protocols
- **Message System**: Real-time chat with reactions, pagination, and message threading
- **Performance Optimization**: Query optimization, indexing, and caching strategies
- **Error Handling**: Comprehensive error handling with user-friendly messages



```tsx
// Convex AI action example
export const generateAIResponse = action({
  args: { 
    messageId: v.id("messages"),
    conversationId: v.id("conversations"),
    userMessage: v.string(),
    userMood: v.optional(v.string()),
  },
  handler: async (ctx, args) => {
    // Crisis detection
    const isCrisis = await detectCrisisKeywords(args.userMessage);
    
    if (isCrisis) {
      return await handleCrisisResponse(ctx, args);
    }
    
    // Generate contextual AI response
    const response = await generateMentalHealthResponse({
      message: args.userMessage,
      mood: args.userMood,
      conversationHistory: await getConversationHistory(ctx, args.conversationId),
    });
    
    return response;
  },
});
```

## Performance Optimization Guidelines

### React Compiler Integration
- **Automatic Optimization**: React 19 Compiler automatically optimizes components
- **ESLint Integration**: Custom ESLint rules for Compiler optimization
- **Manual Optimization**: Use React.memo, useMemo, useCallback only when necessary
- **Bundle Analysis**: Use Expo Atlas to identify performance bottlenecks

### Chat System Performance
- **Virtual Scrolling**: Implement for large conversation histories
- **Message Pagination**: Cursor-based pagination for efficient loading
- **Optimistic Updates**: Immediate UI updates with background sync
- **Debounced Input**: Prevent excessive API calls during typing

### Memory Management
- **Component Cleanup**: Proper cleanup of event listeners and subscriptions
- **Image Optimization**: Lazy loading and proper image sizing
- **State Management**: Efficient state updates to prevent unnecessary re-renders

```tsx
// Performance optimization patterns
import { useAppTheme } from '@/theme';

const MemoizedChatMessage = React.memo(ChatMessage, (prevProps, nextProps) => {
  return prevProps.message.id === nextProps.message.id && 
         prevProps.theme === nextProps.theme;
});

// Optimized query with proper caching
const { data: messages } = useOptimizedQueries(['messages', conversationId], {
  enabled: !!conversationId,
  staleTime: 5 * 60 * 1000, // 5 minutes
  cacheTime: 10 * 60 * 1000, // 10 minutes
});

// Theme-aware component optimization
const OptimizedComponent = React.memo(() => {
  const { colors, spacing } = useAppTheme();
  
  const styles = React.useMemo(() => ({
    container: {
      backgroundColor: colors.background.primary,
      padding: spacing.md,
    },
  }), [colors.background.primary, spacing.md]);
  
  return <View style={styles.container} />;
});
```


## Debugging Common Issues

### Infinite Render Loop
1. Check LocaleProvider context value stability
2. Verify useEffect dependencies
3. Look for setState calls during render
4. Check navigation redirect logic

### TypeScript Errors
1. Cast Apple Colors: `AC.color as unknown as string`
2. Use proper Expo Router href types
3. Handle Convex query loading states

### Authentication Issues  
1. Verify environment variables
2. Check Clerk provider setup in root layout
3. Ensure proper loading state handling

### Translation Issues
1. **Missing Translation Errors**: Add keys to both `/src/locales/en.ts` and `/src/locales/ar.ts`
2. **Legacy Inline Usage**: Migrate to centralized keys (e.g., `t("auth.signIn.title")`)
3. **Key Not Found**: Check for typos in nested key paths
4. **RTL Layout Issues**: Ensure Arabic translations are properly set and RTL is working

## Project-Specific Conventions
- Prefer editing existing components over creating new files
- Follow iOS design patterns for consistency
- Use platform-specific file extensions when behavior differs  
- Always use stable context patterns to prevent re-render loops
- Test auth flow thoroughly after any navigation changes
- **Performance First**: Always consider performance implications of new features
- **AI Safety**: Implement proper safety measures for AI interactions
- **Crisis Handling**: Ensure all crisis detection systems are properly tested
- **Theme Consistency**: Use `useAppTheme()` and design tokens instead of hardcoded values
- **Style Patterns**: Use `createStyles` helper for component-specific styles
- **Design System**: Leverage pre-built common styles from `createThemedCommonStyles`